//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace inventory
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TCOBInventoryDBEntities : DbContext
    {
        public TCOBInventoryDBEntities()
            : base("name=TCOBInventoryDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ComputerInventory_tblCategory> ComputerInventory_tblCategory { get; set; }
        public virtual DbSet<ComputerInventory_tblDepartment> ComputerInventory_tblDepartment { get; set; }
        public virtual DbSet<ComputerInventory_tblMain> ComputerInventory_tblMain { get; set; }
        public virtual DbSet<ComputerInventory_tblMake> ComputerInventory_tblMake { get; set; }
        public virtual DbSet<ComputerInventory_tblModel> ComputerInventory_tblModel { get; set; }
        public virtual DbSet<ComputerInventory_tblOwnedBy> ComputerInventory_tblOwnedBy { get; set; }
        public virtual DbSet<ComputerInventory_tblParse> ComputerInventory_tblParse { get; set; }
        public virtual DbSet<ComputerInventory_tblType> ComputerInventory_tblType { get; set; }
        public virtual DbSet<ComputerInventory_tblUserStatus> ComputerInventory_tblUserStatus { get; set; }
        public virtual DbSet<ComputerInventory3> ComputerInventory3 { get; set; }
        public virtual DbSet<Inventory> Inventories { get; set; }
        public virtual DbSet<tblTempInventory> tblTempInventories { get; set; }
        public virtual DbSet<tblTestInventory> tblTestInventories { get; set; }
        public virtual DbSet<tblTestTemp1Inventory> tblTestTemp1Inventory { get; set; }
        public virtual DbSet<tblTestTempInventory> tblTestTempInventories { get; set; }
        public virtual DbSet<TS_Departments_Serviced> TS_Departments_Serviced { get; set; }
        public virtual DbSet<ComputerInventory> ComputerInventories { get; set; }
        public virtual DbSet<ComputerInventory_tblLogRecords_TEST> ComputerInventory_tblLogRecords_TEST { get; set; }
        public virtual DbSet<ComputerInventory_tblOptions> ComputerInventory_tblOptions { get; set; }
        public virtual DbSet<ComputerInventory_tblUser> ComputerInventory_tblUser { get; set; }
        public virtual DbSet<ComputerInventory_tblUserStorage> ComputerInventory_tblUserStorage { get; set; }
        public virtual DbSet<ComputerInventoryTest> ComputerInventoryTests { get; set; }
    
        public virtual int Add_Inventory(string serialNum, string type, string make, string model, string user, string category, string department, string location, string ownedBy, Nullable<System.DateTime> purchaseDate, Nullable<System.DateTime> auxComputerDate)
        {
            var serialNumParameter = serialNum != null ?
                new ObjectParameter("SerialNum", serialNum) :
                new ObjectParameter("SerialNum", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var makeParameter = make != null ?
                new ObjectParameter("Make", make) :
                new ObjectParameter("Make", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var ownedByParameter = ownedBy != null ?
                new ObjectParameter("OwnedBy", ownedBy) :
                new ObjectParameter("OwnedBy", typeof(string));
    
            var purchaseDateParameter = purchaseDate.HasValue ?
                new ObjectParameter("PurchaseDate", purchaseDate) :
                new ObjectParameter("PurchaseDate", typeof(System.DateTime));
    
            var auxComputerDateParameter = auxComputerDate.HasValue ?
                new ObjectParameter("AuxComputerDate", auxComputerDate) :
                new ObjectParameter("AuxComputerDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Add_Inventory", serialNumParameter, typeParameter, makeParameter, modelParameter, userParameter, categoryParameter, departmentParameter, locationParameter, ownedByParameter, purchaseDateParameter, auxComputerDateParameter);
        }
    
        public virtual int Add_TempTable(string serialNumber, string make, string model, string computerName, string recordStatus, string type, string category, string user, string userPawprint, string department, string location, string building, string ownedBy, string purchaseDate, string auxComputerDate)
        {
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var makeParameter = make != null ?
                new ObjectParameter("Make", make) :
                new ObjectParameter("Make", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var recordStatusParameter = recordStatus != null ?
                new ObjectParameter("RecordStatus", recordStatus) :
                new ObjectParameter("RecordStatus", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var userPawprintParameter = userPawprint != null ?
                new ObjectParameter("UserPawprint", userPawprint) :
                new ObjectParameter("UserPawprint", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var buildingParameter = building != null ?
                new ObjectParameter("Building", building) :
                new ObjectParameter("Building", typeof(string));
    
            var ownedByParameter = ownedBy != null ?
                new ObjectParameter("OwnedBy", ownedBy) :
                new ObjectParameter("OwnedBy", typeof(string));
    
            var purchaseDateParameter = purchaseDate != null ?
                new ObjectParameter("PurchaseDate", purchaseDate) :
                new ObjectParameter("PurchaseDate", typeof(string));
    
            var auxComputerDateParameter = auxComputerDate != null ?
                new ObjectParameter("AuxComputerDate", auxComputerDate) :
                new ObjectParameter("AuxComputerDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Add_TempTable", serialNumberParameter, makeParameter, modelParameter, computerNameParameter, recordStatusParameter, typeParameter, categoryParameter, userParameter, userPawprintParameter, departmentParameter, locationParameter, buildingParameter, ownedByParameter, purchaseDateParameter, auxComputerDateParameter);
        }
    
        public virtual int Add_TestTemp(Nullable<int> testId, string serialNum, string type)
        {
            var testIdParameter = testId.HasValue ?
                new ObjectParameter("TestId", testId) :
                new ObjectParameter("TestId", typeof(int));
    
            var serialNumParameter = serialNum != null ?
                new ObjectParameter("SerialNum", serialNum) :
                new ObjectParameter("SerialNum", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Add_TestTemp", testIdParameter, serialNumParameter, typeParameter);
        }
    
        public virtual int Delete_Author(string author_Name)
        {
            var author_NameParameter = author_Name != null ?
                new ObjectParameter("Author_Name", author_Name) :
                new ObjectParameter("Author_Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_Author", author_NameParameter);
        }
    
        public virtual int Delete_Inventory_DeleteTempTableData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_Inventory_DeleteTempTableData");
        }
    
        public virtual int Delete_Record_Temp(string serialNumber)
        {
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_Record_Temp", serialNumberParameter);
        }
    
        public virtual int Delete_TempTableData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_TempTableData");
        }
    
        public virtual int Delete_TempTestData(string serialNum)
        {
            var serialNumParameter = serialNum != null ?
                new ObjectParameter("SerialNum", serialNum) :
                new ObjectParameter("SerialNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_TempTestData", serialNumParameter);
        }
    
        public virtual int Delete_TestData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_TestData");
        }
    
        public virtual int Get_Author_Details()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Get_Author_Details");
        }
    
        public virtual int Get_Author_Id(string author_Name)
        {
            var author_NameParameter = author_Name != null ?
                new ObjectParameter("Author_Name", author_Name) :
                new ObjectParameter("Author_Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Get_Author_Id", author_NameParameter);
        }
    
        public virtual ObjectResult<string> Get_Category()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Get_Category");
        }
    
        public virtual ObjectResult<string> Get_DepartmentNames()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Get_DepartmentNames");
        }
    
        public virtual ObjectResult<Get_InventoryData_Result> Get_InventoryData(string serialNum)
        {
            var serialNumParameter = serialNum != null ?
                new ObjectParameter("SerialNum", serialNum) :
                new ObjectParameter("SerialNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_InventoryData_Result>("Get_InventoryData", serialNumParameter);
        }
    
        public virtual ObjectResult<string> Get_InventoryMake()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Get_InventoryMake");
        }
    
        public virtual ObjectResult<string> Get_InventoryModel()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Get_InventoryModel");
        }
    
        public virtual ObjectResult<string> Get_InventoryOwnedBy()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Get_InventoryOwnedBy");
        }
    
        public virtual ObjectResult<string> Get_InventoryType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Get_InventoryType");
        }
    
        public virtual int Get_New_Author_Id()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Get_New_Author_Id");
        }
    
        public virtual ObjectResult<Get_Recent_Inventory_Result> Get_Recent_Inventory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_Recent_Inventory_Result>("Get_Recent_Inventory");
        }
    
        public virtual ObjectResult<Get_Record_InventoryDB_Result> Get_Record_InventoryDB(string serialNum)
        {
            var serialNumParameter = serialNum != null ?
                new ObjectParameter("SerialNum", serialNum) :
                new ObjectParameter("SerialNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_Record_InventoryDB_Result>("Get_Record_InventoryDB", serialNumParameter);
        }
    
        public virtual ObjectResult<Get_Record_Temp_Result> Get_Record_Temp(string serialNum)
        {
            var serialNumParameter = serialNum != null ?
                new ObjectParameter("SerialNum", serialNum) :
                new ObjectParameter("SerialNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_Record_Temp_Result>("Get_Record_Temp", serialNumParameter);
        }
    
        public virtual ObjectResult<Get_TestData_Result> Get_TestData(string serialNum)
        {
            var serialNumParameter = serialNum != null ?
                new ObjectParameter("SerialNum", serialNum) :
                new ObjectParameter("SerialNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_TestData_Result>("Get_TestData", serialNumParameter);
        }
    
        public virtual ObjectResult<Get_TestTempData_Result> Get_TestTempData(string serialNum)
        {
            var serialNumParameter = serialNum != null ?
                new ObjectParameter("SerialNum", serialNum) :
                new ObjectParameter("SerialNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_TestTempData_Result>("Get_TestTempData", serialNumParameter);
        }
    
        public virtual ObjectResult<Get_Top_Row_Num_Result> Get_Top_Row_Num()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_Top_Row_Num_Result>("Get_Top_Row_Num");
        }
    
        public virtual int Get_TopRowId()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Get_TopRowId");
        }
    
        public virtual ObjectResult<Inventory_GetInventoryData_Result> Inventory_GetInventoryData(string serialNum)
        {
            var serialNumParameter = serialNum != null ?
                new ObjectParameter("SerialNum", serialNum) :
                new ObjectParameter("SerialNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Inventory_GetInventoryData_Result>("Inventory_GetInventoryData", serialNumParameter);
        }
    
        public virtual int sp_Add_New_Data(string studentNum, string lastName, string firstName, string pawPrint)
        {
            var studentNumParameter = studentNum != null ?
                new ObjectParameter("studentNum", studentNum) :
                new ObjectParameter("studentNum", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var pawPrintParameter = pawPrint != null ?
                new ObjectParameter("pawPrint", pawPrint) :
                new ObjectParameter("pawPrint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Add_New_Data", studentNumParameter, lastNameParameter, firstNameParameter, pawPrintParameter);
        }
    
        public virtual int sp_ComputerInventory_AddUser(string fullName, string pawprint)
        {
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var pawprintParameter = pawprint != null ?
                new ObjectParameter("Pawprint", pawprint) :
                new ObjectParameter("Pawprint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ComputerInventory_AddUser", fullNameParameter, pawprintParameter);
        }
    
        public virtual int sp_ComputerInventory_Compare()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ComputerInventory_Compare");
        }
    
        public virtual ObjectResult<sp_ComputerInventory_DeptID_Result> sp_ComputerInventory_DeptID()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ComputerInventory_DeptID_Result>("sp_ComputerInventory_DeptID");
        }
    
        public virtual ObjectResult<sp_ComputerInventory_Get_Users_Result> sp_ComputerInventory_Get_Users()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ComputerInventory_Get_Users_Result>("sp_ComputerInventory_Get_Users");
        }
    
        public virtual ObjectResult<sp_ComputerInventory_MA_Result> sp_ComputerInventory_MA()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ComputerInventory_MA_Result>("sp_ComputerInventory_MA");
        }
    
        public virtual ObjectResult<sp_ComputerInventory_MakeID_Result> sp_ComputerInventory_MakeID()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ComputerInventory_MakeID_Result>("sp_ComputerInventory_MakeID");
        }
    
        public virtual ObjectResult<sp_ComputerInventory_ModelID_Result> sp_ComputerInventory_ModelID()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ComputerInventory_ModelID_Result>("sp_ComputerInventory_ModelID");
        }
    
        public virtual int sp_ComputerInventory_NewMake()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ComputerInventory_NewMake");
        }
    
        public virtual int sp_ComputerInventory_NewModel()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ComputerInventory_NewModel");
        }
    
        public virtual ObjectResult<sp_ComputerInventory_Trim_Result> sp_ComputerInventory_Trim()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ComputerInventory_Trim_Result>("sp_ComputerInventory_Trim");
        }
    
        public virtual ObjectResult<sp_ComputerInventory_TypeID_Result> sp_ComputerInventory_TypeID()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ComputerInventory_TypeID_Result>("sp_ComputerInventory_TypeID");
        }
    
        public virtual ObjectResult<string> sp_Get_Departments()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_Get_Departments");
        }
    
        public virtual int sp_Inventory_AddNewTempTable(string serialNumber, string make, string model, string computerName, string type, string category, string user, string userPawprint, string department, string location, string letter, string building, string note, string ownedBy, string purchaseDate, string auxComputerDate, string recordStatus, string dateCreated, string lastUpdate, string lastVerified)
        {
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var makeParameter = make != null ?
                new ObjectParameter("Make", make) :
                new ObjectParameter("Make", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var userPawprintParameter = userPawprint != null ?
                new ObjectParameter("UserPawprint", userPawprint) :
                new ObjectParameter("UserPawprint", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var letterParameter = letter != null ?
                new ObjectParameter("Letter", letter) :
                new ObjectParameter("Letter", typeof(string));
    
            var buildingParameter = building != null ?
                new ObjectParameter("Building", building) :
                new ObjectParameter("Building", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var ownedByParameter = ownedBy != null ?
                new ObjectParameter("OwnedBy", ownedBy) :
                new ObjectParameter("OwnedBy", typeof(string));
    
            var purchaseDateParameter = purchaseDate != null ?
                new ObjectParameter("PurchaseDate", purchaseDate) :
                new ObjectParameter("PurchaseDate", typeof(string));
    
            var auxComputerDateParameter = auxComputerDate != null ?
                new ObjectParameter("AuxComputerDate", auxComputerDate) :
                new ObjectParameter("AuxComputerDate", typeof(string));
    
            var recordStatusParameter = recordStatus != null ?
                new ObjectParameter("RecordStatus", recordStatus) :
                new ObjectParameter("RecordStatus", typeof(string));
    
            var dateCreatedParameter = dateCreated != null ?
                new ObjectParameter("DateCreated", dateCreated) :
                new ObjectParameter("DateCreated", typeof(string));
    
            var lastUpdateParameter = lastUpdate != null ?
                new ObjectParameter("LastUpdate", lastUpdate) :
                new ObjectParameter("LastUpdate", typeof(string));
    
            var lastVerifiedParameter = lastVerified != null ?
                new ObjectParameter("LastVerified", lastVerified) :
                new ObjectParameter("LastVerified", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Inventory_AddNewTempTable", serialNumberParameter, makeParameter, modelParameter, computerNameParameter, typeParameter, categoryParameter, userParameter, userPawprintParameter, departmentParameter, locationParameter, letterParameter, buildingParameter, noteParameter, ownedByParameter, purchaseDateParameter, auxComputerDateParameter, recordStatusParameter, dateCreatedParameter, lastUpdateParameter, lastVerifiedParameter);
        }
    
        public virtual int sp_Inventory_AddRecord(string serialNumber, string type, string make, string model, string computerName, string user, string userPawprint, string category, string department, string room, string building, string note, string roomLetter, string ownedBy, string purchaseDate, string auxComputerDate)
        {
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var makeParameter = make != null ?
                new ObjectParameter("Make", make) :
                new ObjectParameter("Make", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var userPawprintParameter = userPawprint != null ?
                new ObjectParameter("UserPawprint", userPawprint) :
                new ObjectParameter("UserPawprint", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var roomParameter = room != null ?
                new ObjectParameter("Room", room) :
                new ObjectParameter("Room", typeof(string));
    
            var buildingParameter = building != null ?
                new ObjectParameter("Building", building) :
                new ObjectParameter("Building", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var roomLetterParameter = roomLetter != null ?
                new ObjectParameter("RoomLetter", roomLetter) :
                new ObjectParameter("RoomLetter", typeof(string));
    
            var ownedByParameter = ownedBy != null ?
                new ObjectParameter("OwnedBy", ownedBy) :
                new ObjectParameter("OwnedBy", typeof(string));
    
            var purchaseDateParameter = purchaseDate != null ?
                new ObjectParameter("PurchaseDate", purchaseDate) :
                new ObjectParameter("PurchaseDate", typeof(string));
    
            var auxComputerDateParameter = auxComputerDate != null ?
                new ObjectParameter("AuxComputerDate", auxComputerDate) :
                new ObjectParameter("AuxComputerDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Inventory_AddRecord", serialNumberParameter, typeParameter, makeParameter, modelParameter, computerNameParameter, userParameter, userPawprintParameter, categoryParameter, departmentParameter, roomParameter, buildingParameter, noteParameter, roomLetterParameter, ownedByParameter, purchaseDateParameter, auxComputerDateParameter);
        }
    
        public virtual int sp_Inventory_AddTempTable(string serialNumber, string make, string model, string computerName, string recordStatus, string type, string category, string user, string userPawprint, string department, string room, string letter, string building, string note, string ownedBy, string purchaseDate, string auxComputerDate)
        {
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var makeParameter = make != null ?
                new ObjectParameter("Make", make) :
                new ObjectParameter("Make", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var recordStatusParameter = recordStatus != null ?
                new ObjectParameter("RecordStatus", recordStatus) :
                new ObjectParameter("RecordStatus", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var userPawprintParameter = userPawprint != null ?
                new ObjectParameter("UserPawprint", userPawprint) :
                new ObjectParameter("UserPawprint", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var roomParameter = room != null ?
                new ObjectParameter("Room", room) :
                new ObjectParameter("Room", typeof(string));
    
            var letterParameter = letter != null ?
                new ObjectParameter("Letter", letter) :
                new ObjectParameter("Letter", typeof(string));
    
            var buildingParameter = building != null ?
                new ObjectParameter("Building", building) :
                new ObjectParameter("Building", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var ownedByParameter = ownedBy != null ?
                new ObjectParameter("OwnedBy", ownedBy) :
                new ObjectParameter("OwnedBy", typeof(string));
    
            var purchaseDateParameter = purchaseDate != null ?
                new ObjectParameter("PurchaseDate", purchaseDate) :
                new ObjectParameter("PurchaseDate", typeof(string));
    
            var auxComputerDateParameter = auxComputerDate != null ?
                new ObjectParameter("AuxComputerDate", auxComputerDate) :
                new ObjectParameter("AuxComputerDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Inventory_AddTempTable", serialNumberParameter, makeParameter, modelParameter, computerNameParameter, recordStatusParameter, typeParameter, categoryParameter, userParameter, userPawprintParameter, departmentParameter, roomParameter, letterParameter, buildingParameter, noteParameter, ownedByParameter, purchaseDateParameter, auxComputerDateParameter);
        }
    
        public virtual int sp_Inventory_AddUsers(string fullName, string pawprint)
        {
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var pawprintParameter = pawprint != null ?
                new ObjectParameter("Pawprint", pawprint) :
                new ObjectParameter("Pawprint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Inventory_AddUsers", fullNameParameter, pawprintParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_Inventory_CreateRecord(string serialNumber, string type, string make, string model, string user, string userPawprint, string category, string department, string room, string building, string note, string roomLetter, string ownedBy, string purchaseDate, string auxComputerDate)
        {
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var makeParameter = make != null ?
                new ObjectParameter("Make", make) :
                new ObjectParameter("Make", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var userPawprintParameter = userPawprint != null ?
                new ObjectParameter("UserPawprint", userPawprint) :
                new ObjectParameter("UserPawprint", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var roomParameter = room != null ?
                new ObjectParameter("Room", room) :
                new ObjectParameter("Room", typeof(string));
    
            var buildingParameter = building != null ?
                new ObjectParameter("Building", building) :
                new ObjectParameter("Building", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var roomLetterParameter = roomLetter != null ?
                new ObjectParameter("RoomLetter", roomLetter) :
                new ObjectParameter("RoomLetter", typeof(string));
    
            var ownedByParameter = ownedBy != null ?
                new ObjectParameter("OwnedBy", ownedBy) :
                new ObjectParameter("OwnedBy", typeof(string));
    
            var purchaseDateParameter = purchaseDate != null ?
                new ObjectParameter("PurchaseDate", purchaseDate) :
                new ObjectParameter("PurchaseDate", typeof(string));
    
            var auxComputerDateParameter = auxComputerDate != null ?
                new ObjectParameter("AuxComputerDate", auxComputerDate) :
                new ObjectParameter("AuxComputerDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_Inventory_CreateRecord", serialNumberParameter, typeParameter, makeParameter, modelParameter, userParameter, userPawprintParameter, categoryParameter, departmentParameter, roomParameter, buildingParameter, noteParameter, roomLetterParameter, ownedByParameter, purchaseDateParameter, auxComputerDateParameter);
        }
    
        public virtual int sp_Inventory_DeleteRecord(Nullable<int> inventoryId)
        {
            var inventoryIdParameter = inventoryId.HasValue ?
                new ObjectParameter("InventoryId", inventoryId) :
                new ObjectParameter("InventoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Inventory_DeleteRecord", inventoryIdParameter);
        }
    
        public virtual int sp_Inventory_DeleteRecordTemp(string serialNumber)
        {
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Inventory_DeleteRecordTemp", serialNumberParameter);
        }
    
        public virtual int sp_Inventory_DeleteTempTableData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Inventory_DeleteTempTableData");
        }
    
        public virtual ObjectResult<sp_Inventory_GetCategories_Result> sp_Inventory_GetCategories()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Inventory_GetCategories_Result>("sp_Inventory_GetCategories");
        }
    
        public virtual ObjectResult<string> sp_Inventory_GetCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_Inventory_GetCategory");
        }
    
        public virtual ObjectResult<string> sp_Inventory_GetDepartmentNames()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_Inventory_GetDepartmentNames");
        }
    
        public virtual ObjectResult<sp_Inventory_GetInventoryData_Result> sp_Inventory_GetInventoryData(string serialNum)
        {
            var serialNumParameter = serialNum != null ?
                new ObjectParameter("SerialNum", serialNum) :
                new ObjectParameter("SerialNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Inventory_GetInventoryData_Result>("sp_Inventory_GetInventoryData", serialNumParameter);
        }
    
        public virtual ObjectResult<sp_Inventory_GetInventoryDataFromActual_Result> sp_Inventory_GetInventoryDataFromActual(string serialNum)
        {
            var serialNumParameter = serialNum != null ?
                new ObjectParameter("SerialNum", serialNum) :
                new ObjectParameter("SerialNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Inventory_GetInventoryDataFromActual_Result>("sp_Inventory_GetInventoryDataFromActual", serialNumParameter);
        }
    
        public virtual ObjectResult<string> sp_Inventory_GetInventoryMake()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_Inventory_GetInventoryMake");
        }
    
        public virtual ObjectResult<string> sp_Inventory_GetInventoryModel()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_Inventory_GetInventoryModel");
        }
    
        public virtual ObjectResult<string> sp_Inventory_GetInventoryOwnedBy()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_Inventory_GetInventoryOwnedBy");
        }
    
        public virtual ObjectResult<string> sp_Inventory_GetInventoryType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_Inventory_GetInventoryType");
        }
    
        public virtual ObjectResult<sp_Inventory_GetMakes_Result> sp_Inventory_GetMakes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Inventory_GetMakes_Result>("sp_Inventory_GetMakes");
        }
    
        public virtual ObjectResult<sp_Inventory_GetModels_Result> sp_Inventory_GetModels()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Inventory_GetModels_Result>("sp_Inventory_GetModels");
        }
    
        public virtual ObjectResult<sp_Inventory_GetRecord_Result> sp_Inventory_GetRecord(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Inventory_GetRecord_Result>("sp_Inventory_GetRecord", idParameter);
        }
    
        public virtual ObjectResult<sp_Inventory_GetRecordInventoryDB_Result> sp_Inventory_GetRecordInventoryDB(string serialNum)
        {
            var serialNumParameter = serialNum != null ?
                new ObjectParameter("SerialNum", serialNum) :
                new ObjectParameter("SerialNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Inventory_GetRecordInventoryDB_Result>("sp_Inventory_GetRecordInventoryDB", serialNumParameter);
        }
    
        public virtual ObjectResult<sp_Inventory_GetRecords_Result> sp_Inventory_GetRecords()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Inventory_GetRecords_Result>("sp_Inventory_GetRecords");
        }
    
        public virtual ObjectResult<sp_Inventory_GetRecordTemp_Result> sp_Inventory_GetRecordTemp(string serialNum)
        {
            var serialNumParameter = serialNum != null ?
                new ObjectParameter("SerialNum", serialNum) :
                new ObjectParameter("SerialNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Inventory_GetRecordTemp_Result>("sp_Inventory_GetRecordTemp", serialNumParameter);
        }
    
        public virtual ObjectResult<sp_Inventory_GetTypes_Result> sp_Inventory_GetTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Inventory_GetTypes_Result>("sp_Inventory_GetTypes");
        }
    
        public virtual int sp_Inventory_UpdateInventoryDB(string serialNumber, string make, string model, string computerName, string type, string user, string userPawprint, string category, string department, string location, string letter, string building, string note, string ownedBy, string purchaseDate, string auxComputerDate)
        {
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var makeParameter = make != null ?
                new ObjectParameter("Make", make) :
                new ObjectParameter("Make", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var userPawprintParameter = userPawprint != null ?
                new ObjectParameter("UserPawprint", userPawprint) :
                new ObjectParameter("UserPawprint", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var letterParameter = letter != null ?
                new ObjectParameter("Letter", letter) :
                new ObjectParameter("Letter", typeof(string));
    
            var buildingParameter = building != null ?
                new ObjectParameter("Building", building) :
                new ObjectParameter("Building", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var ownedByParameter = ownedBy != null ?
                new ObjectParameter("OwnedBy", ownedBy) :
                new ObjectParameter("OwnedBy", typeof(string));
    
            var purchaseDateParameter = purchaseDate != null ?
                new ObjectParameter("PurchaseDate", purchaseDate) :
                new ObjectParameter("PurchaseDate", typeof(string));
    
            var auxComputerDateParameter = auxComputerDate != null ?
                new ObjectParameter("AuxComputerDate", auxComputerDate) :
                new ObjectParameter("AuxComputerDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Inventory_UpdateInventoryDB", serialNumberParameter, makeParameter, modelParameter, computerNameParameter, typeParameter, userParameter, userPawprintParameter, categoryParameter, departmentParameter, locationParameter, letterParameter, buildingParameter, noteParameter, ownedByParameter, purchaseDateParameter, auxComputerDateParameter);
        }
    
        public virtual int sp_Inventory_UpdateInventoryDBActual(string serialNumber, string make, string model, string computerName, string type, string user, string userPawprint, string category, string department, string room, string letter, string building, string note, string ownedBy, string purchaseDate, string auxComputerDate)
        {
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var makeParameter = make != null ?
                new ObjectParameter("Make", make) :
                new ObjectParameter("Make", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var userPawprintParameter = userPawprint != null ?
                new ObjectParameter("UserPawprint", userPawprint) :
                new ObjectParameter("UserPawprint", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var roomParameter = room != null ?
                new ObjectParameter("Room", room) :
                new ObjectParameter("Room", typeof(string));
    
            var letterParameter = letter != null ?
                new ObjectParameter("Letter", letter) :
                new ObjectParameter("Letter", typeof(string));
    
            var buildingParameter = building != null ?
                new ObjectParameter("Building", building) :
                new ObjectParameter("Building", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var ownedByParameter = ownedBy != null ?
                new ObjectParameter("OwnedBy", ownedBy) :
                new ObjectParameter("OwnedBy", typeof(string));
    
            var purchaseDateParameter = purchaseDate != null ?
                new ObjectParameter("PurchaseDate", purchaseDate) :
                new ObjectParameter("PurchaseDate", typeof(string));
    
            var auxComputerDateParameter = auxComputerDate != null ?
                new ObjectParameter("AuxComputerDate", auxComputerDate) :
                new ObjectParameter("AuxComputerDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Inventory_UpdateInventoryDBActual", serialNumberParameter, makeParameter, modelParameter, computerNameParameter, typeParameter, userParameter, userPawprintParameter, categoryParameter, departmentParameter, roomParameter, letterParameter, buildingParameter, noteParameter, ownedByParameter, purchaseDateParameter, auxComputerDateParameter);
        }
    
        public virtual int sp_Inventory_UpdateRecord(Nullable<int> inventoryId, string serialNumber, string type, string make, string model, string user, string userPawprint, string category, string department, string room, string building, string note, string roomLetter, string ownedBy, string purchaseDate, string auxComputerDate)
        {
            var inventoryIdParameter = inventoryId.HasValue ?
                new ObjectParameter("inventoryId", inventoryId) :
                new ObjectParameter("inventoryId", typeof(int));
    
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var makeParameter = make != null ?
                new ObjectParameter("Make", make) :
                new ObjectParameter("Make", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var userPawprintParameter = userPawprint != null ?
                new ObjectParameter("UserPawprint", userPawprint) :
                new ObjectParameter("UserPawprint", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var roomParameter = room != null ?
                new ObjectParameter("Room", room) :
                new ObjectParameter("Room", typeof(string));
    
            var buildingParameter = building != null ?
                new ObjectParameter("Building", building) :
                new ObjectParameter("Building", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var roomLetterParameter = roomLetter != null ?
                new ObjectParameter("RoomLetter", roomLetter) :
                new ObjectParameter("RoomLetter", typeof(string));
    
            var ownedByParameter = ownedBy != null ?
                new ObjectParameter("OwnedBy", ownedBy) :
                new ObjectParameter("OwnedBy", typeof(string));
    
            var purchaseDateParameter = purchaseDate != null ?
                new ObjectParameter("PurchaseDate", purchaseDate) :
                new ObjectParameter("PurchaseDate", typeof(string));
    
            var auxComputerDateParameter = auxComputerDate != null ?
                new ObjectParameter("AuxComputerDate", auxComputerDate) :
                new ObjectParameter("AuxComputerDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Inventory_UpdateRecord", inventoryIdParameter, serialNumberParameter, typeParameter, makeParameter, modelParameter, userParameter, userPawprintParameter, categoryParameter, departmentParameter, roomParameter, buildingParameter, noteParameter, roomLetterParameter, ownedByParameter, purchaseDateParameter, auxComputerDateParameter);
        }
    
        public virtual ObjectResult<sp_TempInventory_GetRecords_Result> sp_TempInventory_GetRecords()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TempInventory_GetRecords_Result>("sp_TempInventory_GetRecords");
        }
    
        public virtual int sp_TempTable_GetRecords()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_TempTable_GetRecords");
        }
    
        public virtual ObjectResult<sp_TempTable_GetRecords_Mismatch_Result> sp_TempTable_GetRecords_Mismatch()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TempTable_GetRecords_Mismatch_Result>("sp_TempTable_GetRecords_Mismatch");
        }
    
        public virtual ObjectResult<sp_TempTable_GetRecords_New_Result> sp_TempTable_GetRecords_New()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TempTable_GetRecords_New_Result>("sp_TempTable_GetRecords_New");
        }
    
        public virtual int Update_InventoryDB(string serialNumber, string make, string model, string computerName, string type, string user, string userPawprint, string category, string department, string location, string building, string ownedBy, string purchaseDate, string auxComputerDate)
        {
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var makeParameter = make != null ?
                new ObjectParameter("Make", make) :
                new ObjectParameter("Make", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var userPawprintParameter = userPawprint != null ?
                new ObjectParameter("UserPawprint", userPawprint) :
                new ObjectParameter("UserPawprint", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var buildingParameter = building != null ?
                new ObjectParameter("Building", building) :
                new ObjectParameter("Building", typeof(string));
    
            var ownedByParameter = ownedBy != null ?
                new ObjectParameter("OwnedBy", ownedBy) :
                new ObjectParameter("OwnedBy", typeof(string));
    
            var purchaseDateParameter = purchaseDate != null ?
                new ObjectParameter("PurchaseDate", purchaseDate) :
                new ObjectParameter("PurchaseDate", typeof(string));
    
            var auxComputerDateParameter = auxComputerDate != null ?
                new ObjectParameter("AuxComputerDate", auxComputerDate) :
                new ObjectParameter("AuxComputerDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_InventoryDB", serialNumberParameter, makeParameter, modelParameter, computerNameParameter, typeParameter, userParameter, userPawprintParameter, categoryParameter, departmentParameter, locationParameter, buildingParameter, ownedByParameter, purchaseDateParameter, auxComputerDateParameter);
        }
    
        public virtual int Update_Test_Temp(Nullable<int> testId, string serialNum, string type)
        {
            var testIdParameter = testId.HasValue ?
                new ObjectParameter("TestId", testId) :
                new ObjectParameter("TestId", typeof(int));
    
            var serialNumParameter = serialNum != null ?
                new ObjectParameter("SerialNum", serialNum) :
                new ObjectParameter("SerialNum", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Test_Temp", testIdParameter, serialNumParameter, typeParameter);
        }
    }
}
